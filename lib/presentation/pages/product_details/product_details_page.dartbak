import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:get_it/get_it.dart';
import 'package:profit_grocery_application/data/inventory/product_inventory.dart';
import 'package:profit_grocery_application/data/inventory/similar_products.dart';
import 'package:profit_grocery_application/domain/repositories/cart_repository.dart';
import 'package:profit_grocery_application/presentation/blocs/cart/cart_bloc.dart';
import 'package:profit_grocery_application/presentation/blocs/cart/cart_event.dart' as cart_events;
import 'package:profit_grocery_application/presentation/blocs/cart/cart_state.dart';
import 'package:profit_grocery_application/presentation/blocs/products/products_bloc.dart';
import 'package:profit_grocery_application/presentation/blocs/products/products_event.dart';
import 'package:profit_grocery_application/presentation/blocs/products/products_state.dart';
import 'package:profit_grocery_application/presentation/pages/category_products/category_products_page.dart';
import 'package:profit_grocery_application/presentation/widgets/cards/enhanced_product_card.dart';
import 'package:profit_grocery_application/presentation/widgets/cards/universal_product_card.dart';
import 'package:profit_grocery_application/services/cart/cart_sync_service.dart';
import 'package:profit_grocery_application/services/cart/universal/universal_cart_service.dart';

import '../../../core/constants/app_constants.dart';
import '../../../core/constants/app_theme.dart';
import '../../../core/utils/color_mapper.dart';
import '../../../domain/entities/product.dart';
import '../../blocs/product_details/product_details_bloc.dart';
import '../../blocs/product_details/product_details_event.dart';
import '../../blocs/product_details/product_details_state.dart';
import '../../widgets/buttons/cart_fab.dart';
import '../../widgets/loaders/shimmer_loader.dart';
import '../cart/cart_page.dart';
import '../../widgets/buttons/add_button.dart';
import 'package:smooth_page_indicator/smooth_page_indicator.dart';

class ProductDetailsPage extends StatefulWidget {
  final String? productId;
  final String? categoryId;

  const ProductDetailsPage({
    Key? key,
    this.productId,
    this.categoryId,
  }) : super(key: key);

  @override
  State<ProductDetailsPage> createState() => _ProductDetailsPageState();
}

class _ProductDetailsPageState extends State<ProductDetailsPage> {
  late final PageController _imagePageController;
  int _currentImageIndex = 0;

  @override
  void initState() {
    super.initState();
    _imagePageController = PageController(initialPage: 0);
    
    // Load product details
    if (widget.productId != null) {
      context.read<ProductDetailsBloc>().add(
        LoadProductDetails(widget.productId!),
      );
    }
  }

  @override
  void dispose() {
    _imagePageController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocConsumer<ProductDetailsBloc, ProductDetailsState>(
      listener: (context, state) {
        if (state.status == ProductDetailsStatus.error) {
          // Check if the error is a FormatException
          final errorMsg = state.errorMessage ?? 'An error occurred';
          final isFormatException = errorMsg.contains('FormatException');
          
          // Only show user-friendly messages
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(isFormatException 
                  ? 'Unable to load product' 
                  : errorMsg),
              backgroundColor: Colors.red,
              action: SnackBarAction(
                label: 'DISMISS',
                textColor: Colors.white,
                onPressed: () {
                  ScaffoldMessenger.of(context).hideCurrentSnackBar();
                },
              ),
            ),
          );
        }
      },
      builder: (context, state) {
        return Scaffold(
          backgroundColor: AppTheme.backgroundColor,
          appBar: AppBar(
            title: const Text('Product Details'),
            actions: [
              if (widget.categoryId != null)
                TextButton.icon(
                  onPressed: () {
                    Navigator.pushReplacement(
                      context,
                      MaterialPageRoute(
                        builder: (context) => CategoryProductsPage(categoryId: widget.categoryId),
                      ),
                    );
                  },
                  icon: const Icon(Icons.grid_view, color: AppTheme.accentColor),
                  label: Text(
                    'View All',
                    style: TextStyle(
                      color: AppTheme.accentColor,
                      fontSize: 14.sp,
                    ),
                  ),
                ),
                IconButton(
                  icon: const Icon(Icons.share_outlined),
                  onPressed: () {
                    // Share product
                  },
                ),
                IconButton(
                  icon: const Icon(Icons.favorite_border_outlined),
                  onPressed: () {
                    // Add to wishlist
                  },
                ),
                SizedBox(width: 8.w),
              ],
          ),
          body: state.status == ProductDetailsStatus.loading
              ? _buildLoadingState()
              : state.product == null
                  ? Center(child: Text('Product not found', style: TextStyle(color: Colors.white)))
                  : _buildProductDetails(state.product!),
          bottomNavigationBar: state.product != null && state.product!.inStock
              ? _buildBottomActionBar(state.product!)
              : null,
        );
      }
    );
  }

  Widget _buildLoadingState() {
    return SingleChildScrollView(
      padding: EdgeInsets.all(16.w),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          ShimmerLoader.customContainer(height: 300.h, width: double.infinity),
          SizedBox(height: 16.h),
          ShimmerLoader.customContainer(height: 24.h, width: 200.w),
          SizedBox(height: 8.h),
          ShimmerLoader.customContainer(height: 20.h, width: 150.w),
          SizedBox(height: 16.h),
          ShimmerLoader.customContainer(height: 100.h, width: double.infinity),
          SizedBox(height: 16.h),
          ShimmerLoader.customContainer(height: 50.h, width: double.infinity),
        ],
      ),
    );
  }

  Widget _buildProductDetails(Product product) {
    // For the demo, assume product has at least one image
    // In a real app, multiple images would come from the Product entity
    final productImages = [
      product.image,
      '${AppConstants.assetsProductsPath}1.png',
      '${AppConstants.assetsProductsPath}2.png',
    ];
    
    final hasDiscount = product.mrp != null && product.mrp! > product.price;
    final discountPercentage = hasDiscount
        ? ((product.mrp! - product.price) / product.mrp! * 100).round()
        : 0;

    return SingleChildScrollView(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Product images with page indicator
          Stack(
            children: [
              // Image carousel
              SizedBox(
                height: 300.h,
                child: PageView.builder(
                  controller: _imagePageController,
                  itemCount: productImages.length,
                  onPageChanged: (index) {
                    setState(() {
                      _currentImageIndex = index;
                    });
                  },
                  itemBuilder: (context, index) {
                    // Get the background color based on the product's category
                    final Color backgroundColor = ColorMapper.getColorForCategory(
                      product.id.split('_').take(2).join('_')
                    );
                        
                    return Container(
                      color: backgroundColor,
                      padding: EdgeInsets.all(24.w),
                      child: Image.asset(
                        productImages[index],
                        fit: BoxFit.contain,
                      ),
                    );
                  },
                ),
              ),
              
              // Page indicator
              Positioned(
                bottom: 16.h,
                left: 0,
                right: 0,
                child: Center(
                //   child: SmoothPageIndicator(
                //     controller: _imagePageController,
                //     count: productImages.length,
                //     effect: ExpandingDotsEffect(
                //       activeDotColor: AppTheme.accentColor,
                //       dotColor: Colors.white.withOpacity(0.4),
                //       dotHeight: 8.h,
                //       dotWidth: 8.w,
                //       expansionFactor: 2,
                //     ),
                //   ),
                // ),
              ),
              
              // Discount badge
              if (hasDiscount)
                Positioned(
                  top: 16.h,
                  right: 16.w,
                  child: Container(
                    padding: EdgeInsets.symmetric(
                      horizontal: 12.w,
                      vertical: 6.h,
                    ),
                    decoration: BoxDecoration(
                      color: Colors.red,
                      borderRadius: BorderRadius.circular(16.r),
                    ),
                    child: Text(
                      '$discountPercentage% OFF',
                      style: TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                        fontSize: 14.sp,
                      ),
                    ),
                  ),
                ),
            ],
          ),
          
          // Product details
          Padding(
            padding: EdgeInsets.all(16.w),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Product name
                Text(
                  product.name,
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 24.sp,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                
                // Product weight
                if (product.weight != null && product.weight!.isNotEmpty)
                  Padding(
                    padding: EdgeInsets.only(top: 8.h),
                    child: Text(
                      product.weight!,
                      style: TextStyle(
                        color: Colors.white70,
                        fontSize: 16.sp,
                      ),
                    ),
                  ),
                
                SizedBox(height: 16.h),
                
                // Price section
                Row(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    // Current price
                    Text(
                      '${AppConstants.currencySymbol}${product.price.toStringAsFixed(0)}',
                      style: TextStyle(
                        color: AppTheme.accentColor,
                        fontSize: 28.sp,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    
                    SizedBox(width: 12.w),
                    
                    // Original price if there's a discount
                    if (hasDiscount)
                      Text(
                        '${AppConstants.currencySymbol}${product.mrp?.toStringAsFixed(0)}',
                        style: TextStyle(
                          color: Colors.white.withOpacity(0.7),
                          fontSize: 18.sp,
                          decoration: TextDecoration.lineThrough,
                        ),
                      ),
                    
                    // Display discount percentage
                    if (hasDiscount)
                      Container(
                        margin: EdgeInsets.only(left: 8.w),
                        padding: EdgeInsets.symmetric(
                          horizontal: 8.w,
                          vertical: 2.h,
                        ),
                        decoration: BoxDecoration(
                          color: Colors.green,
                          borderRadius: BorderRadius.circular(4.r),
                        ),
                        child: Text(
                          '$discountPercentage% OFF',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 12.sp,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                  ],
                ),
                
                SizedBox(height: 24.h),
                
                // Product description
                if (product.description!.isNotEmpty)
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Description',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 18.sp,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      
                      SizedBox(height: 8.h),
                      
                      Text(
                        product.description,
                        style: TextStyle(
                          color: Colors.white70,
                          fontSize: 14.sp,
                          height: 1.5,
                        ),
                      ),
                      
                      SizedBox(height: 16.h),
                    ],
                  ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildBottomActionBar(Product product) {
    return Container(
      padding: EdgeInsets.symmetric(
        horizontal: 16.w,
        vertical: 12.h,
      ),
      decoration: BoxDecoration(
        color: AppTheme.primaryColor,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.3),
            blurRadius: 10,
            offset: const Offset(0, -2),
          ),
        ],
        border: Border(
          top: BorderSide(
            color: AppTheme.accentColor.withOpacity(0.3),
            width: 1,
          ),
        ),
      ),
      child: SafeArea(
        child: AddButton(
          productId: product.id,
          sourceCardType: ProductCardType.productDetails,
          height: 46.h,
          fontSize: 16.sp,
          inStock: product.inStock,
        ),
      ),
    );
  }
}